We all open our browsers and navigate to a web page. In fact, if you are reading this then you are definitely on linkedin's we page whether through a phone or through a computer. Understanding how the browser request works gives you a better appreciation. when you type "https://www.google.com" and hit enter, a complex sequence of events unfolds behind the scenes that eventually connects you to Google's servers. This blog will make you understand the various stages of the processes and the critical components that make web browsing a seamless experience. 

Various terms are going to be used and I will want to explain.
DNS: Domain name server, it is basically the dictionary that connects what name the human remembers to what address the computer can trace. The human-readable is the domain name and the computer-readable is the IP address.
IP address: The IP is an abbreviation for "Internet Protocol". Consider the IP address as your GPS address. Just like how your GPS address is made of latitudes and longitudes but you do not have to memorize it, your IP address is made of numbers separated into 4 groups by dots (.). It can go from 0.0.0.0 to 255.255.255.255.
Server: Think about your computer having all the documents, programs and files (such as music) and you want your whole family to be able to assess what's on your computer any time they connect to theirs. This makes your computer a server. So the server is the computer that has the data that you need to access. 
TCP/IP: This is an abbreviation of "Transmission Control Protocol/Internet Protocol". It is the protocol that ensures data is reliably transferred between your device and the server. 
Firewall: If you are going to be allowing transfer of information to your device from your server and vice versa then you will have to protect people from having unauthorized entry access. Just like how there is security at the airports protecting the nation or state, firewalls ensure every data being transmitted is scrutinized properly before it goes in or comes out.
HTTPS/SSL: Ever watched spy movies where to prevent the message from being decoded before it reaches the intended user, it is encrypted in a way only understood by the writer and the intended user? Yes, that's what the computer uses SSL (secure socket layer) and TLS (transfer layer security) for anytime you need a secure Hypertext Transmission Protocol (HTTPS). That way, a decoder is shared by the browser and the server and only after it has recognized it will the data exchange happen, otherwise the data stays encrypted and protected from cyber thieves.
Web Server: A web server is a server that is capable of delivering web content over the internet through a web browser. It uses HTTP request to generate an HTTP response. The response typically contains HTML, CSS, JavaScript, and other assets required to render the webpage.
Load-Balancer: When there is too much work for one server to do, i.e. too much data being received requesting for so much information, there would have to be multiple servers to be able to reduce the work load on just one server. As a result, another web server would have to serve as the load balancer to distribute the load and increase as well as maintain efficiency and reliability.
Application Server: For dynamic content or interactive features, the web server may communicate with an application server. The application server executes server-side code, interacts with databases, and performs other tasks needed to generate dynamic content. This separation of concerns enhances scalability and maintainability.
Database: The database is the store room for the data. The data is only obtained when the server (application server) communicates with the database.
Now that we know the terms, let me tell you a story. 
Alice needed some information from "https://www/google.com" and so she entered that into the address bar. Because the computer doesn't understand letters but only binary numbers, the DNS picked up the address and started looking for the address in his database. If it doesn't find it in its local "name dictionary", it goes to look in all available "dictionaries" and when its found, connects the url with the coordinates - IP address and establishes a connection. Now, Alice's device would use the TCP to build a bridge between her and the server to ensure a safe and reliable path for their communication. Firewalls are installed to safeguard her against unwanted intruders and so each packet is inspected allowing only trustworthy ones to pass through. The HTTPs with SSL ensured also that her communication with the server remained encrypted and safe from prying eyes. Due to the many people trying to assess the server, there is a load-balancer that ensures Alice gets her response in a seamlessly reliable and efficient way. The web server then diligently requests the resources, assembling the HTML, CSS and JavaScript into one Google webpage. The Application Server and Database then manipulates data adding a touch to the static web pages and makes them engaging so that Alice can now interact with Google and get responses.
